
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // projects: Publicly readable, admin writable
    match /projects/{projectId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // users: Users can create their own doc, read their own doc, and admins can read/write any.
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if request.auth != null; // Any authenticated user can create their user doc.
      allow delete: if false; // Nobody can delete user documents
    }
    
    // carts: Users can read/write their own cart. Admins can read any cart.
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // purchases: Users can read/write their own purchases. Admins can read any.
    match /purchases/{userId} {
       allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // inquiries: Authenticated users can create. Users can read their own. Admins can read all.
    match /inquiries/{inquiryId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && (request.resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // sales: Read-only for admins
    match /sales/{saleId} {
        allow read: if request.auth != null && isAdmin(request.auth.uid);
        allow write: if false; // Can only be written via backend logic (or batch writes from trusted code).
    }
  }
}
