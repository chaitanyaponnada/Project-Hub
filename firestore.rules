
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow users to create their own user document
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.auth.uid == userId;
    }
    
    // Allow users to create their own admin document
    match /admins/{adminId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.auth.uid == adminId;
      // Only existing admins can add other admins for security
      allow write: if isAdmin();
    }
    
    match /carts/{userId} {
        allow read, write: if isAuth() && request.auth.uid == userId;
    }
    
    match /purchases/{userId} {
        allow read, write: if isAuth() && request.auth.uid == userId;
    }

    match /projects/{projectId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }
    
    match /inquiries/{inquiryId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }
    
    // Fallback security rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
