
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isRequestingUser(userId) {
        return request.auth.uid == userId;
    }

    function isUserAdmin(userId) {
        // Ensure the user document exists and the isAdmin flag is true.
        return exists(/databases/$(database)/documents/users/$(userId)) &&
               get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Projects can be read by anyone, but only written by admins.
    match /projects/{projectId} {
      allow read: if true;
      allow write: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
    }
    
    // Sales can only be created by the purchasing user (via the cart hook) and read by admins.
    match /sales/{saleId} {
        allow read: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
        allow create: if isUserAuthenticated();
    }

    // Users can read/update their own user document. Only admins can write to any user doc.
    match /users/{userId} {
      allow read, update: if isUserAuthenticated() && isRequestingUser(userId);
      allow create: if isUserAuthenticated();
      allow write: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
    }

    // Carts can only be read/written by their owner.
    match /carts/{userId} {
        allow read, write: if isUserAuthenticated() && isRequestingUser(userId);
    }
    
    // Purchases can only be read/written by their owner.
    match /purchases/{userId} {
        allow read, write: if isUserAuthenticated() && isRequestingUser(userId);
    }
    
    // Inquiries can be created by anyone. Users can read their own inquiries. Admins can read all.
    match /inquiries/{inquiryId} {
        allow create: if true;
        allow read: if isUserAuthenticated() && 
                       (isUserAdmin(request.auth.uid) || request.auth.uid == resource.data.userId);
    }
  }
}
