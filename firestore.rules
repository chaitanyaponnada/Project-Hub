
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // PROJECTS: Allow anyone to read, but only admins to write
    match /projects/{projectId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // USERS:
    // Allow users to read/update their own user document
    // Allow admins to read/write any user document
    // Nobody can delete user documents
    match /users/{userId} {
        allow read, update: if request.auth.uid == userId || isAdmin(request.auth.uid);
        allow create: if request.auth.uid == userId;
        allow delete: if false;
    }
    
    // CARTS: Allow users to manage their own cart
    match /carts/{userId} {
      allow get, create, update, delete: if request.auth.uid == userId;
    }

    // PURCHASES: Allow users to manage their own purchases
    match /purchases/{userId} {
        allow get, create, update, delete: if request.auth.uid == userId;
    }
    
    // SALES: Admins can read, nobody can write directly (written via batch from backend logic)
    match /sales/{saleId} {
        allow read: if isAdmin(request.auth.uid);
        allow write: if false;
    }

    // INQUIRIES:
    // Allow anyone to create an inquiry
    // Allow authenticated users to read their own inquiries
    // Allow admins to read all inquiries
    match /inquiries/{inquiryId} {
        allow create: if true;
        allow read: if (request.auth != null && request.resource.data.userId == request.auth.uid) || isAdmin(request.auth.uid);
        allow write: if isAdmin(request.auth.uid);
    }
  }
}
