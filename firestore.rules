
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin privileges.
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Users can only be created by themselves.
    // Any authenticated user can read the users list.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin(request.auth.uid); // Admins can update user roles.
    }

    // Projects can be read by anyone, but only created, updated,
    // or deleted by an administrator.
    match /projects/{projectId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Carts can only be accessed by the user who owns them.
    match /carts/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Purchases can only be accessed by the user who owns them.
    match /purchases/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Inquiries can be created by anyone.
    // Users can read their own inquiries.
    // Admins can read all inquiries and write (reply to) them.
    match /inquiries/{inquiryId} {
        allow create: if true;
        allow read: if (request.auth != null && request.auth.uid == resource.data.userId) || (request.auth != null && isAdmin(request.auth.uid));
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
